Design Fundamentals:    
    - Foundations Systems Design Knowledge
    - Key Characteristics of Systems
    - Actual Components of the Systems
    - Actual Tech

Network Protocols:
    - Internet Protocol
        - All information stored in bytes
        - Header:
            - Anywhere between 20 and 60 Bytes
            - Source IP Adress
            - Destination IP Adress
            - Total Size of the Packet
            - Version of the Internet Protocol (4 or 6)
        - Data:
            - Information that one machine is sending to another
            - One IP data can send a max 2^16 bytes or 0.65 MB
            - Hence multiple IP packets are used to send large data 
    - Transmission Control Protocol:
        - Built on top of the Internet Protocol
        - Meant to send IP packets in an ordered way
        - Reliable that all packets will be received
        - Allows to send arbitrarily long pieces of data to other machines
        - Apart from the conventional header, TCP also contains TCP Header
        - Header:
        - TCP Header:
        - Data: 
        - A TCP connection is setup with source and destination servers through handshake
    - HyperText Transfer Protocol:
        - Protocol that is built on top of TCP 
        - Introduce a higher level abstraction above TCP and IP
        - With HTTP, we completely forget about IP packets, we forget about TCP
        - All that we care about are HTTP requests and responses
        - HTTP Requests consists of the following schema:
            - host
            - port
            - method
            - headers
            - body
        - HTTP Response consists of the following schema:
            - status code
            - headers
            - body

Key Value Store:
    - Useful for caching
    - Lowered Latencies and Improved Throughputs
    - Some Key Value Stores data into disk while others might write data into memory

Specialized Storage Paradigm:
    - Blob Store:
        - Binary Large Object
        - Any Arbitrary piece of unstructured data is a Blob
        - GCS/S3/Azure Blobe Storage
        - Behave like key value store
    - Time Series Database:
        - Data which are all related to data
        - Used for Monitoring, IOT, Stock Prices, etc
        - Influx DB and Prometheus
    - Graph Database:
        - Built on top of the Graph Data Model
        - Neo4J
        - Useful in Social Networks Facebooks, Youtube, etc
    - Spatial Database:
        - Locations on a Map
        - Google Maps
        - Quadtree has either 0 children nodes or no children nodes (leaf)
        - Specialized Databases for Spatial data or Mongo/PostGres can be deemed fit
    
Replication and Sharding:
    - Replica needs to be updated with the main database in a synchronous way
    - Splitting up the data from the main database into a bunch of little databases is called Sharding
    - Hotspots are the phenomenon where certain shards gets a lot more traffic than other shards
    just by the nature of the store
    - In case of Hotspots, using replicas is more meaningful than consistent hashing as the shards
    which might go down will not be able to serve in the future
    - Use a Reverse Proxy with a Shard to decide where the data should go to

Leader Election:
    - If we have a group of servers, that are incharge of doing the same thing, instead of all of
    them doing the same thing, which might not be something you would want to do multiple times,
    leader election have the servers in question, election one of the servers as the leader and that
    server alone is going to be the one responsible for doing the actions that all of the servers are
    meant to do.
    - The other servers which are not the leaders are called the followers.
    - If the leader fails, one among the followers will be elected the new leader.
    - Act of gaining consensus of who the leader is non-trivial
    - Consensus Algorithms are math heavy that allow multiple servers in a group or multiple nodes
    in a cluster to reach consensus on some single data value. Ex. Raft.
    - Zookeeper and Etcd are tools that allows to implement your own leader election in a very easy 
    way
    - Etcd is a key-value store, highly available and strongly consistent by implementing a consensus 
    algorithm. Under the hood, it implements Raft consensus algorithm.
    - Multiple servers need to be communicating with etcd and at any given point in time, one 
    special key-value pair in the etcd would be elected as the leader.

Configuration:
    - Two primary types of Configurations:
        - Static 
        - Dynamic
    
Rate Limiting:
    - Setting a threshold on certain operations past which this operations will return errors
    - If you don't rate limit certain operations in a system, you run the risk of your system be
    brought down by malicious actors
    - DOS: Denial of service attacks. When a bad actor floods the system with a bunch of request
    bringing the system down.
    - Rate Limiting can help prevent that from happening, i.e., DOS attacks. 
    - Rate limit on IP address, Geography, etc
    - A Distributed Denial of Service Attack tries to circum-navigate rate limiting by having
    a bunch of different machines that might not be identifiable as part of the same organization, 
    same group having all of this machines inundate with traffic.
    - In case of DDOS, we don't keep track of rate limiting in servers, but in a separated service 
    or database so that all our service are able to speak to. 
    - Use Redis for rate limiting
    - Use tiers for rate limiting like 1 hits per 0.5 seconds but not more than 10 times a minute

Logging and Monitoring:
    - A timeseries database is preferred for building monitoring metrics than building directly from logs
    - Monitoring Databases includes: 
        - InfluxDB
        - Prometheus
    - Tools that are used for querying Databases are:
        - Graphana

Publish/Subscribe Pattern:
    - As soon as we deal with distributed systems, we need to deal with persistent storage.
    - Four Entities:
        - Publishers: Servers. Channels of Specific Information. They Publish data to the topics
        and not the subscribers
        - Subscribers: Clients those were originally listening for data. Subscribes to the topic as
        opposed to the publisher
        - Topic:
        - Message:  Some operations that will be relevant to the subscribers and the subscribers will be 
        listening for
    - All the messages that are going to be published to topics are going to be effectively stored in 
    persistent storage in those topics.
    - Messages are guaranteed to be delivered atleast once to the subscribers who are listening the topic
    - The subscribers acknowledges those messages from the topic
    - If the acknowledgement is not made from behalf of the subscribers, then messages from the topic will be
    delivered multiple times to the same subscriber
    - An Idempotent operation is an operation that has the same ultimate outcome, regardless of how many
    times it is performed.
    - More often than not, we might not want to perform a non-idempotent operation 
    - Messages will be in the form of a queue, what goes in the topic first, will be sent to the subscribers 
    first
    - Different types of data might get published to different topics
    - Examples:
        - Apache Kafka
        - Google Cloud Pubsub
        - 