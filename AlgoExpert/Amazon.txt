We will be considering the following:
    - HomePage
    - Search
    - Items
    - Carts
    - Orders
    - Cancel Orders
    - Warehouses


We do not have to care about the home page much as it is going to consist just the search box, also we do 
not have to worry about Multiple Carts, we can have single cart per user. 

We also do not have to worry about the search engine recommendation service and it is going to come 
out of the box created for us and we just have to figure out where that sub system is going to live in our
greater design.

We need to keep information about the stock of the items, such that users are not going to order items that
are not out of stock, and when they do order items that are in stock, that should effectively consume the
Stock. 

If an item is in stock, any user can see the item and also how many of the items are left on the browsing
page and any user can add it into the cart.  But once they begin the checkout process and the item 
is no longer available, they need to be alerted if the item is no longer in stock and if it is in 
stock, the checkout item should reserve the item for 10 minutes. 

Once an order is submitted, it gets assigned to an amazon warehouse, then it gets assigned to the delivery
truck or a specific amazon worker

When an order is placed, each items in a specific order might be available in different warehouses, and
therefore the order needs to be split up. We need to focus on how many stock of the items are present.
The above Warehouse assignment needs to be taken care by a particular service.

We do not have to worry about the delivery drivers and other poc apart from the warehouses. 

We do not have to worry about multiple warehouses which has the same item, we can use a separate services
to pick the warehouse, or we can use a round robin technique to select the warehouse

We need to focus on a specific region, ex. amazon.com, but this business will be identical for the other
regions as well. Hence we have to worry about only amazon.com. 

Item Search should be very fast but we do not need a fast order submission. 

Core Functionality is super important and less about the latencies and high availabilities. 

We will be getting to work on highly available ralational database out of the box. 

Amazon serves 300 Million customers, 60000 orders per hour which is close to 20 orders per second
globally, which will be about 10 orders per second (assumming half the orders are from the US)

We can have one major relational database at a regional level, where the warehouses and the users are 
going to interact with this db

There will be APIs which will be interacting with this dbs. The user requests will flow to the API
servers through Round Robin Load Balancing

Relational Database will consists of the following tables:
    - Items (One Row represents one item)
        - Only Item related information needs to be present
        - Stocks of individual items should not be present, else it will be a write heavy table 
        -  Schema
            - id
            - name
            - description
            - price
            - image in blob storage
    - AggregatedStock (Aggregated Stocks across all warehouses)
        - id
        - stock (integer)
    - Orders (One Row represents one order)
        - Schema
            - orderID
            - customerID
            - status
            - items
            - price
            - shippingAddress
    - Carts
        - Schema
            - id
            - items
    - WarehouseStock
        - itemID
        - wareHouseID
        - physicalStock: Sanity Check on how many physical stock they have at a given moment in their 
        warehouse
        - availableStock: When an order is getting assigned, that will consume the available stock
    - WarehouseOrders:
        - whOrderID
        - parentOrderID
        - whID
        - orderStatus
        - items
        - shippingAddress

We can split the system into two major part:
    - Users:
        - An user calls a method like getItemCatalogue(), takes in a search parameter/string
        - The API servers defined above is not going to hit the items table directly, but is 
        going to hit the auxiliary service like searchResultsService() and this service will interact 
        with the items table directly
        - The searchResultsService() will contain certain ML/AI algorithms will will come up with the 
        best items from the items table 
        - Since the Search functionality should be devoid of latencies, the searchResultsService() should
        cache responses to popular search queries. Ex. TV, Dining Room Table, etc. 
        - When searchResultsService() is called, it is going to hit both the items table as well as the stocks
        table such that it retrives the stock related information from the later table.
        - If the item is out of stock, updateItemInCart() service cannot be invoked.
        - Once the rows has been added in the Cart table, if the beginCheckout() API is called, the service
        checks the stocks of the items in the stock table and matches it with the cart values and if the 
        stock quantity is less, user alert will happen with the items being out of stocks.
        - If the items is still in stock after the beginCheckout() api is called, the reservation service
        will be called, it will update the stock table and decrease the stock by 1 or as per the number of
        the user's order
        - Once the time of 10 min elapses and the submitOrder() API was not called or the cancelledCheckout() 
        API is called, then again the AggregatedStock table will be updated back to the old count following 
        ACID transactions
        - Once the submitOrder() API is called, then the cart is going to be empty for the specific user,
        and it is going to write an order to the orders table
        - When the cancelOrder() API is triggered, it is verified if the order has not been shipped, and 
        then it will increase the stock's numbers in the aggregated stock

    - Warehouses:
        - The orderAssignment() service will take the input from the orders table and will connect
        with the warehouses with smart logics like Machine Learning
        - It will find a warehouse having the stock of a certain item and that will consume the count
        from the availableStock column
        - When a new Stock Appears, it increases the physicalStock column, it will go down, when an item 
        physically moves out from the warehouse, either shipped or thrown out 
        - When a new Stock Appears, it also increases the availableStock column, but goes down when 
        orderAssignment() service is triggered or is thrown out and not when it physically moves out
        - The orderAssignment() service will write the records to the WarehouseOrders table.


